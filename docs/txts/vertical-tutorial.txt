Hyer 入门必读
    [项目主页 http://github.com/xurenlu/hyer/]
    Last Updated: %%date(%Y-%m-%d)



%! target:html
%! encoding: UTF-8
%! options: --toc
%! postproc(html): @@ <BR>
%! postproc(xhtml): @@ <BR>
%! postproc(html): {{(.*?)}} <\1>
%!postproc(html): {{ <
%!postproc(html): }} >


""" {{div class="notice-wrapper" style="text-align:center;"}} 
""" {{div class="notice" style="text-align:left;margin-left:50px;padding:5px;border:1px solid gray;background:#ccc;margin-right:50px;"}} 
+ 请随时跟踪 [hyer项目 http://github.com/xurenlu/hyer/] 以获得更新信息. 
+ 作者邮箱:xurenlu@gmail.com,欢迎来邮沟通. 
+ 当前文档最近更新时间 %%mtime(%c) 
""" {{/div}}
""" {{/div}}




""" {{style type="text/css"}}
""" body {
""" margin:auto 150px ;
""" }
""" .blocked { background:#ccc;border:1px solid gray;
""" padding:10px;
""" margin-left:50px;margin-right:50px;margin-bottom:10px;
""" } 
""" {{/style}}

""" {{div class="blocked"}} 
**目录**
%%toc
""" {{/div}}

关于Hyer.web,请查看[Hyer.web web.html]

+ Hyer.vertical 中的术语解释和工作流程 +

    Hyer整个的设计其实参考了现在工厂中的流水线的概念。数据在这里被称为产品.当然，产品可能是成品，也可能是半成品。流水线的产品，除开离开流水线时的产品之外，都是半成品。一个工人(worker)从上一工序那里接收半成品，进行质量检查,然后进行职责范围内的加工.本工序加工完成了的半成品,交给下一工序的工人。如果加工失败，则丢弃或交给特定修复工序的工人进行加工。而工人 Worker的工作是以一系列的工具为基础的,一个工具完成很基本的一个操作。在Hyer里我们也定义了许多Tool类。

**Product**: @@ 流水线上的数据,是
等待被Worker加工的材料。在Hyer里，一般是一个dict,相当于php中的一个数组,或
是其他语言中的一个hash.

**Tool**: 最基本的功能单元,比如把内容中换行或其他字符替换掉,给某一项加上http://前缀等.可以视为一个函数.函数的英文function也恰好有功能意思。

**Worker**: 集合了一系列Tool操作的一个功能系列,完成一定的目的。通常,一个Worker明白自己的下一工序Worker是什么Worker.

**Flow**: 流水线。集合了一系列的Worker，一种工序的worker可能只有一个,也可能有多个.一条流水线一定有一个入口Worker,也一定有一个出口worker.原材料被入口worker拿来加口,最后在出口Worker那里包装入库。


+ 如何利用Hyer 来完成抓取 +

++ 规划抓取任务 ++

任何一个抓取器,目前都不能很好地完成自动分析网页这一理想功功能。绝大多数情况下,我们需要事先对要抓取的目标网站进行结构分析。比如对列表页的地址是什么样的，翻页是从哪取下一页的地址，如何判断列表页已经结束等等。这就是事先规划。 

++ 在hyer中创建一个空抓取任务 ++

运行命令
""" {{div class="blocked"}} 
$hyerctl.py init task_name 
""" {{/div}}
来创建一个名称为task_name的抓取任务.命令执行后会在当前目录创建一个命为task_name的目录，目录里有一个叫做 task_name.py的文件。这个文件里已经有了一些内容,我们需要修改这个文件里的run方法. 运行
""" {{div class="blocked"}} 
$hyerctl.py run task_name/task_name.py
""" {{/div}}
即可运行这个任务。

++ 修改workers ++

这个task_name/task_name.py里,需要修改这样几个地方:
 + 变量workers,定义了各个worker的处理流程;
 + 变量initial_product,定义了第一个worker要处理的数据,通常是网站入口地址之类的;
 + 变量entry_worker_post:定义了第一个进行处理的worker的post的名称; 


++ 运行抓取 ++

运行命令
""" {{div class="blocked"}} 
$hyerctl.py run task_name/task_name.py 
""" {{/div}}
来完成抓取过程。一般情况下都不是只对task_name/task_name.py 修改一次就能得到良好的数据产出的，需要有耐心地不断进行修正。
